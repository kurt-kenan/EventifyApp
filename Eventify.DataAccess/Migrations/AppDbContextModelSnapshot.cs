// <auto-generated />
using System;
using Eventify.DataAccess.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Eventify.DataAccess.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Eventify.Core.Entities.EmailVerification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Expiration")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsUsed")
                        .HasColumnType("bit");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("EmailVerifications");
                });

            modelBuilder.Entity("Eventify.Core.Entities.Event", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatorId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MaxParticipants")
                        .HasColumnType("int");

                    b.Property<string>("PhotoPath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("Eventify.Core.Entities.EventHobby", b =>
                {
                    b.Property<int>("EventId")
                        .HasColumnType("int");

                    b.Property<int>("HobbyId")
                        .HasColumnType("int");

                    b.HasKey("EventId", "HobbyId");

                    b.HasIndex("HobbyId");

                    b.ToTable("EventHobbies");
                });

            modelBuilder.Entity("Eventify.Core.Entities.EventParticipant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("EventId")
                        .HasColumnType("int");

                    b.Property<DateTime>("JoinedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.HasIndex("UserId");

                    b.ToTable("EventParticipants");
                });

            modelBuilder.Entity("Eventify.Core.Entities.Hobby", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Hobby");
                });

            modelBuilder.Entity("Eventify.Core.Entities.PasswordResetToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Expiration")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsUsed")
                        .HasColumnType("bit");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("PasswordResetTokens");
                });

            modelBuilder.Entity("Eventify.Core.Entities.SubscriptionPlan", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("CanCreateEvents")
                        .HasColumnType("bit");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DurationInDays")
                        .HasColumnType("int");

                    b.Property<bool>("HasAdvancedAnalytics")
                        .HasColumnType("bit");

                    b.Property<bool>("HasPrioritySupport")
                        .HasColumnType("bit");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("MaxDailyJoins")
                        .HasColumnType("int");

                    b.Property<int>("MaxEventsPerMonth")
                        .HasColumnType("int");

                    b.Property<int>("MaxParticipantsPerEvent")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("SortOrder")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("SubscriptionPlans");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CanCreateEvents = true,
                            Description = "Küçük etkinlikler için ideal başlangıç paketi",
                            DurationInDays = 30,
                            HasAdvancedAnalytics = false,
                            HasPrioritySupport = false,
                            IsActive = true,
                            MaxDailyJoins = 3,
                            MaxEventsPerMonth = 5,
                            MaxParticipantsPerEvent = 50,
                            Name = "Basic",
                            Price = 29.99m,
                            SortOrder = 1
                        },
                        new
                        {
                            Id = 2,
                            CanCreateEvents = true,
                            Description = "Orta ölçekli etkinlikler için profesyonel paket",
                            DurationInDays = 30,
                            HasAdvancedAnalytics = false,
                            HasPrioritySupport = true,
                            IsActive = true,
                            MaxDailyJoins = 10,
                            MaxEventsPerMonth = 20,
                            MaxParticipantsPerEvent = 200,
                            Name = "Pro",
                            Price = 79.99m,
                            SortOrder = 2
                        },
                        new
                        {
                            Id = 3,
                            CanCreateEvents = true,
                            Description = "Büyük etkinlikler için premium organizatör paketi",
                            DurationInDays = 30,
                            HasAdvancedAnalytics = true,
                            HasPrioritySupport = true,
                            IsActive = true,
                            MaxDailyJoins = 50,
                            MaxEventsPerMonth = 100,
                            MaxParticipantsPerEvent = 1000,
                            Name = "Organizer+",
                            Price = 199.99m,
                            SortOrder = 3
                        });
                });

            modelBuilder.Entity("Eventify.Core.Entities.TokenPackage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("BonusText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPopular")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("SortOrder")
                        .HasColumnType("int");

                    b.Property<int>("TokenAmount")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("TokenPackages");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Küçük paket - Hızlı başlangıç",
                            IsActive = true,
                            IsPopular = false,
                            Name = "500 Jeton",
                            Price = 19.99m,
                            SortOrder = 1,
                            TokenAmount = 500
                        },
                        new
                        {
                            Id = 2,
                            BonusText = "En Popüler",
                            Description = "Orta paket - En popüler seçim",
                            IsActive = true,
                            IsPopular = true,
                            Name = "1000 Jeton",
                            Price = 34.99m,
                            SortOrder = 2,
                            TokenAmount = 1000
                        },
                        new
                        {
                            Id = 3,
                            BonusText = "%10 Bonus",
                            Description = "Büyük paket - %10 bonus",
                            IsActive = true,
                            IsPopular = false,
                            Name = "5000 Jeton",
                            Price = 149.99m,
                            SortOrder = 3,
                            TokenAmount = 5000
                        },
                        new
                        {
                            Id = 4,
                            BonusText = "%15 Bonus",
                            Description = "Mega paket - %15 bonus",
                            IsActive = true,
                            IsPopular = false,
                            Name = "10000 Jeton",
                            Price = 279.99m,
                            SortOrder = 4,
                            TokenAmount = 10000
                        },
                        new
                        {
                            Id = 5,
                            BonusText = "%20 Bonus",
                            Description = "Ultra paket - %20 bonus",
                            IsActive = true,
                            IsPopular = false,
                            Name = "50000 Jeton",
                            Price = 1199.99m,
                            SortOrder = 5,
                            TokenAmount = 50000
                        },
                        new
                        {
                            Id = 6,
                            BonusText = "%25 Bonus",
                            Description = "Maksimum paket - %25 bonus",
                            IsActive = true,
                            IsPopular = false,
                            Name = "100000 Jeton",
                            Price = 1999.99m,
                            SortOrder = 6,
                            TokenAmount = 100000
                        });
                });

            modelBuilder.Entity("Eventify.Core.Entities.TokenTransaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("PaymentMethod")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TransactionId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("TokenTransactions");
                });

            modelBuilder.Entity("Eventify.Core.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsEmailVerified")
                        .HasColumnType("bit");

                    b.Property<bool>("IsGoogleAccount")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSubscribed")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastLoginAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhotoPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Tokens")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Eventify.Core.Entities.UserHobbies", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("HobbyId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "HobbyId");

                    b.HasIndex("HobbyId");

                    b.ToTable("UserHobbies");
                });

            modelBuilder.Entity("Eventify.Core.Entities.UserSubscription", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("PlanId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PlanId");

                    b.HasIndex("UserId");

                    b.ToTable("UserSubscriptions");
                });

            modelBuilder.Entity("FavoriteEvent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("EventId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.HasIndex("UserId");

                    b.ToTable("FavoriteEvents");
                });

            modelBuilder.Entity("Eventify.Core.Entities.EmailVerification", b =>
                {
                    b.HasOne("Eventify.Core.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Eventify.Core.Entities.Event", b =>
                {
                    b.HasOne("Eventify.Core.Entities.User", "Creator")
                        .WithMany("CreatedEvents")
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Creator");
                });

            modelBuilder.Entity("Eventify.Core.Entities.EventHobby", b =>
                {
                    b.HasOne("Eventify.Core.Entities.Event", "Event")
                        .WithMany("EventHobbies")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Eventify.Core.Entities.Hobby", "Hobby")
                        .WithMany("EventHobbies")
                        .HasForeignKey("HobbyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");

                    b.Navigation("Hobby");
                });

            modelBuilder.Entity("Eventify.Core.Entities.EventParticipant", b =>
                {
                    b.HasOne("Eventify.Core.Entities.Event", "Event")
                        .WithMany("Participants")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Eventify.Core.Entities.User", "User")
                        .WithMany("ParticipatedEvents")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Eventify.Core.Entities.PasswordResetToken", b =>
                {
                    b.HasOne("Eventify.Core.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Eventify.Core.Entities.TokenTransaction", b =>
                {
                    b.HasOne("Eventify.Core.Entities.User", "User")
                        .WithMany("TokenTransactions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Eventify.Core.Entities.UserHobbies", b =>
                {
                    b.HasOne("Eventify.Core.Entities.Hobby", "Hobby")
                        .WithMany("UserHobbies")
                        .HasForeignKey("HobbyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Eventify.Core.Entities.User", "User")
                        .WithMany("UserHobbies")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Hobby");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Eventify.Core.Entities.UserSubscription", b =>
                {
                    b.HasOne("Eventify.Core.Entities.SubscriptionPlan", "Plan")
                        .WithMany("UserSubscriptions")
                        .HasForeignKey("PlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Eventify.Core.Entities.User", "User")
                        .WithMany("Subscriptions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Plan");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FavoriteEvent", b =>
                {
                    b.HasOne("Eventify.Core.Entities.Event", "Event")
                        .WithMany("FavoritedByUsers")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Eventify.Core.Entities.User", "User")
                        .WithMany("FavoriteEvents")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Eventify.Core.Entities.Event", b =>
                {
                    b.Navigation("EventHobbies");

                    b.Navigation("FavoritedByUsers");

                    b.Navigation("Participants");
                });

            modelBuilder.Entity("Eventify.Core.Entities.Hobby", b =>
                {
                    b.Navigation("EventHobbies");

                    b.Navigation("UserHobbies");
                });

            modelBuilder.Entity("Eventify.Core.Entities.SubscriptionPlan", b =>
                {
                    b.Navigation("UserSubscriptions");
                });

            modelBuilder.Entity("Eventify.Core.Entities.User", b =>
                {
                    b.Navigation("CreatedEvents");

                    b.Navigation("FavoriteEvents");

                    b.Navigation("ParticipatedEvents");

                    b.Navigation("Subscriptions");

                    b.Navigation("TokenTransactions");

                    b.Navigation("UserHobbies");
                });
#pragma warning restore 612, 618
        }
    }
}
