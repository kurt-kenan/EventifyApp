@model Eventify.Mvc.Controllers.HomeIndexViewModel
@{
    ViewData["Title"] = "Etkinlikler";
}

<div class="premium-events-app">
    <!-- Hero Section with Gradient Background -->
    <section class="premium-hero">
        <div class="hero-overlay"></div>
        <div class="container">
        <div class="hero-content">
            <h1 class="hero-title">
                    <span class="text-gradient">Premium</span> Etkinlik Deneyimi
            </h1>
                <p class="hero-subtitle">Dünyanın en seçkin etkinliklerini keşfedin</p>
                <div class="hero-search">
                    <form method="get" class="search-form">
                        <div class="input-group">
                            <input type="text" name="search" class="form-control" placeholder="Konser, festival, workshop..." value="@ViewBag.Search">
                            <button class="btn btn-search" type="submit">
                                <i class="bi bi-search"></i> Ara
                            </button>
        </div>
                    </form>
        </div>
    </div>
        </div>
    </section>

    <!-- Main Content -->
    <main class="premium-main">
    <!-- Filter Section -->
        <section class="premium-filter">
            <div class="container">
                <div class="filter-card">
            @if (TempData["Error"] != null)
            {
                        <div class="alert alert-danger">
                            <i class="bi bi-exclamation-triangle-fill"></i> @TempData["Error"]
                </div>
            }
            @if (TempData["Success"] != null)
            {
                <div class="alert alert-success">
                            <i class="bi bi-check-circle-fill"></i> @TempData["Success"]
                </div>
            }

                    <form method="get" class="filter-form" onsubmit="return false;">
                <div class="filter-grid">
                    <div class="filter-group">
                        <label><i class="bi bi-geo-alt"></i> Lokasyon</label>
                                <input type="text" name="location" placeholder="Şehir veya mekan" value="@ViewBag.Location">
                    </div>
                    <div class="filter-group">
                                <label><i class="bi bi-calendar"></i> Tarih Aralığı</label>
                                <div class="date-range">
                        <input type="date" name="startDate" value="@ViewBag.StartDate">
                                    <span>ile</span>
                        <input type="date" name="endDate" value="@ViewBag.EndDate">
                                </div>
                    </div>
                    <div class="filter-group">
                        <label><i class="bi bi-tags"></i> Kategori</label>
                        <select name="hobbyId">
                            <option value="">Tüm Kategoriler</option>
                            @foreach (var hobby in (List<Eventify.Mvc.Models.HobbyViewModel>)ViewBag.AllHobbies)
                            {
                                var isSelected = (ViewBag.HobbyId != null && (int)ViewBag.HobbyId == hobby.Id);
                                string selectedAttr = isSelected ? " selected=\"selected\"" : "";
                                @Html.Raw($"<option value=\"{hobby.Id}\"{selectedAttr}>{hobby.Name}</option>")
                            }
                        </select>
                    </div>
                </div>
            </form>
        </div>
    </div>
        </section>

    <!-- Events Section -->
        <section class="premium-events">
            <div class="container">
        <div class="section-header">
                    <h2 class="section-title">
                        <i class="bi bi-stars"></i> Öne Çıkan Etkinlikler
                    </h2>
            <div class="view-options">
                        <div class="btn-group" role="group">
                            <button type="button" class="btn btn-view active" data-view="grid">
                                <i class="bi bi-grid-3x3-gap"></i> Grid
                </button>
                            <button type="button" class="btn btn-view" data-view="list">
                                <i class="bi bi-list-ul"></i> Liste
                </button>
                        </div>
            </div>
        </div>

        @if (Model != null && Model.Events.Count > 0)
        {
            <div class="events-grid">
                @foreach (var ev in Model.Events)
                {
                    <div class="event-card">
                                <div class="card-image">
                                    <img src="@(string.IsNullOrEmpty(ev.PhotoPath) ? "https://source.unsplash.com/random/600x400/?event," + (ev.Hobbies.FirstOrDefault()?.Name ?? "premium") : ev.PhotoPath)" 
                                         alt="@ev.Title" class="event-image">
                                    <div class="card-badges">
                                @if (Model.JoinedEventIds.Contains(ev.Id))
                                {
                                    <span class="badge joined">
                                                <i class="bi bi-check-circle-fill"></i> Katıldınız
                                    </span>
                                }

                            </div>
                                    <div class="event-date">
                                        <span class="date-day">@ev.StartDate.ToString("dd")</span>
                                        <span class="date-month">@ev.StartDate.ToString("MMM")</span>
                        </div>
                            </div>
                                <div class="card-body">
                                    <div class="event-categories">
                            @if (ev.Hobbies != null && ev.Hobbies.Count > 0)
                            {
                                            @foreach (var hobby in ev.Hobbies.Take(2))
                                            {
                                                <span class="category-tag">@hobby.Name</span>
                                            }
                                            @if (ev.Hobbies.Count > 2)
                                            {
                                                <span class="category-tag">+@(ev.Hobbies.Count - 2)</span>
                                            }
                                        }
                                    </div>
                                    <h3 class="event-title">@ev.Title</h3>
                                    <p class="event-description">@(ev.Description.Length > 100 ? ev.Description.Substring(0, 100) + "..." : ev.Description)</p>
                                    <div class="event-meta">
                                        <div class="meta-item">
                                            <i class="bi bi-geo-alt"></i>
                                            <span>@ev.Location</span>
                                        </div>
                                        <div class="meta-item">
                                            <i class="bi bi-clock"></i>
                                            <span>@ev.StartDate.ToString("g")</span>
                                        </div>
                                    </div>
                            <div class="event-footer">
                                <div class="event-creator">
                                            <img src="https://ui-avatars.com/api/?name=@ev.CreatorUsername&background=random" 
                                                 alt="@ev.CreatorUsername" class="creator-avatar">
                                            <span class="creator-name">@ev.CreatorUsername</span>
                                </div>
                                        <div class="event-actions">
                                            @if (Context.Session.GetString("token") != null)
                                            {
                                                var isFavorite = Model.FavoriteEventIds != null && Model.FavoriteEventIds.Contains(ev.Id);
                                                <button class="btn btn-favorite @(isFavorite ? "active" : "")" data-event-id="@ev.Id">
                                                    <i class="bi @(isFavorite ? "bi-heart-fill" : "bi-heart")"></i>
                                                </button>
                                            }
                                @if (Context.Session.GetString("token") != null)
                                {
                                    if (Model.JoinedEventIds.Contains(ev.Id))
                                    {
                                                    <button class="btn btn-joined" disabled>
                                                        <i class="bi bi-check-circle-fill"></i> Katıldınız
                                        </button>
                                    }
                                    else
                                    {
                                        <form asp-action="JoinEvent" asp-controller="Home" method="post">
                                            <input type="hidden" name="eventId" value="@ev.Id">
                                                        <button type="submit" class="btn btn-join">
                                                            <i class="bi bi-ticket-perforated"></i> Katıl (1 Jeton)
                                            </button>
                                        </form>
                                    }
                                }
                                else
                                {
                                                <a href="/Auth/Login" class="btn btn-login">
                                        <i class="bi bi-box-arrow-in-right"></i> Giriş Yap
                                    </a>
                                }
                                        </div>
                            </div>
                        </div>
                    </div>
                }
            </div>
        }
        else
        {
            <div class="empty-state">
                <div class="empty-icon">
                    <i class="bi bi-calendar-x"></i>
                </div>
                <h3>Uygun Etkinlik Bulunamadı</h3>
                <p>Farklı filtreler deneyerek daha fazla etkinlik keşfedebilirsiniz.</p>
                        <a href="/" class="btn btn-primary">
                    <i class="bi bi-arrow-counterclockwise"></i> Filtreleri Sıfırla
                </a>
            </div>
        }
            </div>
        </section>
    </main>
</div>

<!-- Toast Notifications -->
<div class="position-fixed bottom-0 end-0 p-3" style="z-index: 11">
    <div id="liveToast" class="toast hide" role="alert" aria-live="assertive" aria-atomic="true">
        <div class="toast-header">
            <strong class="me-auto" id="toast-title">Bildirim</strong>
            <button type="button" class="btn-close" data-bs-dismiss="toast" aria-label="Close"></button>
        </div>
        <div class="toast-body" id="toast-message"></div>
    </div>
</div>

<style>
    :root {
        --primary: #6c5ce7;
        --primary-light: #a29bfe;
        --primary-dark: #5649c0;
        --secondary: #00b894;
        --accent: #fd79a8;
        --dark: #2d3436;
        --medium: #636e72;
        --light: #dfe6e9;
        --white: #ffffff;

        --border-radius: 16px;
        --box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1);
        --transition: all 0.3s cubic-bezier(0.25, 0.8, 0.25, 1);
    }

    /* Base Styles */
    body {
        font-family: 'Poppins', sans-serif;
        background-color: #f8f9fa;
        color: var(--dark);
        line-height: 1.6;
    }

    .premium-events-app {
        overflow-x: hidden;
    }

    /* Hero Section */
    .premium-hero {
        position: relative;
        height: 500px;
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        color: white;
        display: flex;
        align-items: center;
        padding: 4rem 0;
        margin-bottom: 3rem;
    }

    .hero-overlay {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: rgba(0, 0, 0, 0.3);
    }

    .hero-content {
        position: relative;
        z-index: 1;
        max-width: 800px;
        margin: 0 auto;
        text-align: center;
        }

    .hero-title {
        font-size: 3.5rem;
        font-weight: 800;
        margin-bottom: 1rem;
        line-height: 1.2;
    }

    .text-gradient {
        background: linear-gradient(90deg, #fdcb6e, #e17055);
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
    }

    .hero-subtitle {
        font-size: 1.5rem;
        font-weight: 300;
        margin-bottom: 2rem;
        opacity: 0.9;
    }

    .hero-search {
        margin-top: 2rem;
    }

    .search-form .input-group {
        background: rgba(255, 255, 255, 0.2);
        backdrop-filter: blur(10px);
        border-radius: 50px;
        overflow: hidden;
        box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
    }

    .search-form .form-control {
        background: transparent;
        border: none;
        color: white;
        padding: 1rem 1.5rem;
        font-size: 1.1rem;
    }

    .search-form .form-control::placeholder {
        color: rgba(255, 255, 255, 0.7);
    }

    .search-form .form-control:focus {
        background: transparent;
        color: white;
        box-shadow: none;
    }

    .btn-search {
        background: var(--white);
        color: var(--primary);
        border: none;
        padding: 0 1.5rem;
        font-weight: 600;
        transition: var(--transition);
    }

    .btn-search:hover {
        background: var(--light);
    }

    /* Filter Section */
    .premium-filter {
        margin-bottom: 3rem;
    }

    .filter-card {
        background: var(--white);
        border-radius: var(--border-radius);
        box-shadow: var(--box-shadow);
        padding: 2rem;
        margin-top: -80px;
        position: relative;
        z-index: 2;
    }

    .filter-form {
        width: 100%;
    }

    .filter-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
        gap: 1.5rem;
    }

    .filter-group {
        margin-bottom: 1rem;
    }

        .filter-group label {
        display: block;
        margin-bottom: 0.5rem;
            font-weight: 500;
            color: var(--dark);
            display: flex;
            align-items: center;
        gap: 0.5rem;
        }

        .filter-group input,
        .filter-group select {
        width: 100%;
        padding: 0.8rem 1rem;
        border: 1px solid var(--light);
            border-radius: var(--border-radius);
        font-size: 1rem;
            transition: var(--transition);
        }

            .filter-group input:focus,
            .filter-group select:focus {
                outline: none;
        border-color: var(--primary);
        box-shadow: 0 0 0 3px rgba(108, 92, 231, 0.2);
    }

    .date-range {
        display: flex;
        align-items: center;
        gap: 0.5rem;
    }

    .date-range span {
        color: var(--medium);
    }

    .filter-actions {
        display: flex;
        align-items: flex-end;
        gap: 1rem;
    }

    .btn-filter {
        background: var(--primary);
        color: white;
        border: none;
        padding: 0.8rem 1.5rem;
        border-radius: var(--border-radius);
        font-weight: 600;
        transition: var(--transition);
        display: flex;
        align-items: center;
        gap: 0.5rem;
    }

    .btn-filter:hover {
        background: var(--primary-dark);
            transform: translateY(-2px);
        }

    .btn-reset {
        background: transparent;
        color: var(--medium);
        border: 1px solid var(--light);
        padding: 0.8rem 1.5rem;
        border-radius: var(--border-radius);
        font-weight: 500;
        transition: var(--transition);
        display: flex;
        align-items: center;
        gap: 0.5rem;
    }

    .btn-reset:hover {
        background: var(--light);
        color: var(--dark);
    }

    .filter-status {
        display: flex;
        align-items: center;
        gap: 0.5rem;
        color: var(--medium);
        font-size: 0.9rem;
        font-style: italic;
    }

    .filter-status i {
        color: var(--primary);
    }

    .filter-status i.spinning {
        animation: spin 1s linear infinite;
    }

    /* Events Section */
    .section-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 2rem;
    }

    .section-title {
            font-size: 1.8rem;
            font-weight: 700;
            color: var(--dark);
        display: flex;
        align-items: center;
        gap: 0.75rem;
    }

    .view-options .btn-group {
        border-radius: var(--border-radius);
        overflow: hidden;
        box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
    }

    .btn-view {
        background: var(--white);
        color: var(--medium);
        border: none;
        padding: 0.5rem 1rem;
        font-size: 0.9rem;
        display: flex;
        align-items: center;
        gap: 0.5rem;
    }

    .btn-view.active {
        background: var(--primary);
            color: white;
        }

    .btn-view:first-child {
        border-right: 1px solid var(--light);
        }

    /* Events Grid */
    .events-grid {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(350px, 1fr));
        gap: 2rem;
        transition: var(--transition);
    }

    /* List View */
    .events-grid.list-view {
        grid-template-columns: 1fr;
        gap: 1rem;
    }

    .events-grid.list-view .event-card {
        flex-direction: row;
        max-width: none;
    }

    .events-grid.list-view .card-image {
        width: 300px;
        height: 200px;
        flex-shrink: 0;
    }

    .events-grid.list-view .card-body {
        flex: 1;
        padding: 1.5rem;
    }

    .events-grid.list-view .event-title {
        font-size: 1.5rem;
        margin-bottom: 1rem;
    }

    .events-grid.list-view .event-description {
        margin-bottom: 1rem;
        -webkit-line-clamp: 2;
        display: -webkit-box;
        -webkit-box-orient: vertical;
        overflow: hidden;
    }

    .events-grid.list-view .event-meta {
        flex-direction: row;
        gap: 2rem;
        margin-bottom: 1rem;
    }

    .events-grid.list-view .event-footer {
        margin-top: auto;
        justify-content: space-between;
    }

    .events-grid.list-view .event-categories {
        margin-bottom: 0.75rem;
    }

    .events-grid.list-view .category-tag {
        font-size: 0.8rem;
        padding: 0.3rem 0.8rem;
    }

    .event-card {
        background: var(--white);
        border-radius: var(--border-radius);
        overflow: hidden;
        box-shadow: var(--box-shadow);
        transition: var(--transition);
        display: flex;
        flex-direction: column;
    }

        .event-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 15px 40px rgba(0, 0, 0, 0.15);
        }

    .card-image {
        position: relative;
        height: 220px;
        overflow: hidden;
    }

    .event-image {
            width: 100%;
            height: 100%;
            object-fit: cover;
            transition: var(--transition);
        }

    .event-card:hover .event-image {
        transform: scale(1.05);
    }

    .card-badges {
        position: absolute;
        top: 1rem;
        right: 1rem;
        display: flex;
        flex-direction: column;
        gap: 0.5rem;
    }

    .badge {
        padding: 0.35rem 0.75rem;
        border-radius: 50px;
        font-size: 0.75rem;
        font-weight: 600;
        display: inline-flex;
        align-items: center;
        gap: 0.35rem;
    }

    .badge.joined {
        background: rgba(0, 184, 148, 0.2);
        color: var(--secondary);
    }



    .event-date {
        position: absolute;
        top: 1rem;
        left: 1rem;
        background: var(--white);
        border-radius: 8px;
        padding: 0.5rem 0.75rem;
        text-align: center;
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
    }

    .date-day {
        font-size: 1.25rem;
            font-weight: 700;
            color: var(--primary);
            display: block;
            line-height: 1;
        }

    .date-month {
        font-size: 0.7rem;
            font-weight: 600;
            text-transform: uppercase;
            color: var(--medium);
        }

    .card-body {
        padding: 1.5rem;
        flex: 1;
        display: flex;
        flex-direction: column;
    }

    .event-categories {
        display: flex;
        flex-wrap: wrap;
        gap: 0.5rem;
        margin-bottom: 1rem;
    }

    .category-tag {
        background: rgba(108, 92, 231, 0.1);
        color: var(--primary);
        padding: 0.25rem 0.75rem;
        border-radius: 50px;
        font-size: 0.75rem;
        font-weight: 500;
        }

    .event-title {
        font-size: 1.25rem;
        font-weight: 700;
        margin-bottom: 0.75rem;
        color: var(--dark);
    }

    .event-description {
        color: var(--medium);
        font-size: 0.9rem;
        margin-bottom: 1.5rem;
        flex: 1;
    }

    .event-meta {
        display: flex;
        flex-direction: column;
        gap: 0.5rem;
        margin-bottom: 1.5rem;
    }

    .meta-item {
        display: flex;
        align-items: center;
        gap: 0.5rem;
        font-size: 0.9rem;
        color: var(--medium);
    }

    .event-footer {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding-top: 1rem;
        border-top: 1px solid var(--light);
    }

    .event-creator {
        display: flex;
        align-items: center;
        gap: 0.75rem;
    }

    .creator-avatar {
            width: 32px;
            height: 32px;
            border-radius: 50%;
            object-fit: cover;
        border: 2px solid var(--light);
        }

    .creator-name {
            font-size: 0.85rem;
            font-weight: 500;
        }

    .event-actions {
        display: flex;
        align-items: center;
        gap: 0.75rem;
    }

    .btn-favorite {
        background: transparent;
        color: var(--medium);
        border: none;
        width: 36px;
        height: 36px;
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        transition: var(--transition);
    }

    .btn-favorite:hover {
        background: rgba(253, 121, 168, 0.1);
        color: var(--accent);
    }

    .btn-favorite.active {
        color: var(--accent);
    }

    .btn-joined {
        background: rgba(0, 184, 148, 0.1);
        color: var(--secondary);
        border: none;
        padding: 0.5rem 1rem;
        border-radius: 50px;
        font-size: 0.85rem;
        font-weight: 500;
        display: flex;
        align-items: center;
        gap: 0.5rem;
    }

    .btn-join {
        background: var(--primary);
        color: white;
        border: none;
        padding: 0.5rem 1rem;
        border-radius: 50px;
        font-size: 0.85rem;
        font-weight: 500;
        display: flex;
        align-items: center;
        gap: 0.5rem;
        transition: var(--transition);
    }

    .btn-join:hover {
        background: var(--primary-dark);
    }

    .btn-login {
        background: transparent;
        color: var(--primary);
        border: 1px solid var(--primary);
        padding: 0.5rem 1rem;
        border-radius: 50px;
        font-size: 0.85rem;
        font-weight: 500;
        display: flex;
        align-items: center;
        gap: 0.5rem;
        transition: var(--transition);
    }

    .btn-login:hover {
        background: var(--primary);
        color: white;
        }

    /* Empty State */
    .empty-state {
        text-align: center;
        padding: 4rem 2rem;
        background: var(--white);
        border-radius: var(--border-radius);
        box-shadow: var(--box-shadow);
    }

    .empty-icon {
        font-size: 4rem;
        color: var(--light);
        margin-bottom: 1.5rem;
    }

    .empty-state h3 {
        font-size: 1.5rem;
        font-weight: 600;
        margin-bottom: 0.5rem;
        color: var(--dark);
    }

    .empty-state p {
        color: var(--medium);
        margin-bottom: 1.5rem;
        max-width: 400px;
        margin-left: auto;
        margin-right: auto;
    }

    /* Toast Notifications */
    .toast {
        border-radius: var(--border-radius);
        border: none;
        box-shadow: var(--box-shadow);
    }

    /* Loading Indicator */
    .events-grid.loading {
        position: relative;
        min-height: 200px;
    }

    .loading-overlay {
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background: rgba(255, 255, 255, 0.9);
        display: flex;
        align-items: center;
        justify-content: center;
        z-index: 10;
        border-radius: var(--border-radius);
    }

    .loading-spinner {
        display: flex;
        flex-direction: column;
        align-items: center;
        gap: 1rem;
        color: var(--primary);
    }

    .loading-spinner i {
        font-size: 2rem;
        animation: spin 1s linear infinite;
    }

    .loading-spinner span {
        font-weight: 500;
        color: var(--dark);
    }

    @@keyframes spin {
        from { transform: rotate(0deg); }
        to { transform: rotate(360deg); }
    }

    /* Responsive Design */
    @@media (max-width: 1200px) {
        .hero-title {
            font-size: 3rem;
        }
    }

    @@media (max-width: 992px) {
        .premium-hero {
            height: 450px;
        }

        .hero-title {
            font-size: 2.5rem;
        }

        .hero-subtitle {
            font-size: 1.25rem;
        }

        .filter-card {
            margin-top: -60px;
    }

    .events-grid {
        grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
    }
    }

    @@media (max-width: 768px) {
        .premium-hero {
            height: 400px;
            padding: 3rem 0;
        }

        .hero-title {
            font-size: 2.2rem;
    }

    .filter-grid {
        grid-template-columns: 1fr;
    }

        .filter-actions {
            justify-content: center;
    }

    .section-header {
        flex-direction: column;
        align-items: flex-start;
            gap: 1rem;
        }

        .view-options {
            width: 100%;
        }

        .btn-group {
            width: 100%;
        }

        .btn-view {
            flex: 1;
            justify-content: center;
        }
    }

    @@media (max-width: 576px) {
        .premium-hero {
            height: 350px;
        }

        .hero-title {
            font-size: 1.8rem;
    }

    .hero-subtitle {
        font-size: 1rem;
    }

        .search-form .form-control {
            padding: 0.75rem 1rem;
            font-size: 1rem;
        }

        .btn-search {
            padding: 0 1rem;
        }

        .filter-card {
            padding: 1.5rem;
    }

    .events-grid {
        grid-template-columns: 1fr;
    }

        /* Mobile list view adjustments */
        .events-grid.list-view .event-card {
            flex-direction: column;
        }

        .events-grid.list-view .card-image {
            width: 100%;
            height: 200px;
        }

        .events-grid.list-view .event-meta {
            flex-direction: column;
            gap: 0.5rem;
        }

        .event-footer {
            flex-direction: column;
            gap: 1rem;
            align-items: flex-start;
        }

        .event-actions {
            width: 100%;
            justify-content: flex-end;
        }
    }
</style>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
<script>
        $(document).ready(function() {
            // Toggle favorite
            $(document).on('click', '.btn-favorite', function(e) {
                e.preventDefault();
                const btn = $(this);
                const eventId = btn.data('event-id');
                
                $.ajax({
                    url: '/Profile/ToggleFavorite',
                    type: 'POST',
                    data: { eventId: eventId },
                    success: function(res) {
                        if (res.success) {
                            btn.toggleClass('active');
                            const icon = btn.find('i');
                            if (btn.hasClass('active')) {
                                icon.removeClass('bi-heart').addClass('bi-heart-fill');
                                showToast('Etkinlik favorilere eklendi', false);
                            } else {
                                icon.removeClass('bi-heart-fill').addClass('bi-heart');
                                showToast('Etkinlik favorilerden çıkarıldı', false);
                            }
                        } else {
                            showToast(res.message || 'İşlem başarısız oldu', true);
                        }
                    },
                    error: function() {
                        showToast('Bir hata oluştu', true);
                    }
                });
            });

            // Show toast notification
            function showToast(message, isError) {
                const toast = $('#liveToast');
                const toastBody = $('#toast-message');
                const toastTitle = $('#toast-title');
                
                toastBody.text(message);
                
                if (isError) {
                    toast.addClass('bg-danger text-white');
                    toastTitle.text('Hata');
                } else {
                    toast.addClass('bg-success text-white');
                    toastTitle.text('Başarılı');
                }
                
                const bsToast = new bootstrap.Toast(toast[0]);
                bsToast.show();
            }

            // View toggle
            $('.btn-view').click(function() {
                const viewType = $(this).data('view');
                
                // Remove active class from all buttons
                $('.btn-view').removeClass('active');
                // Add active class to clicked button
                $(this).addClass('active');
                
                // Toggle view classes
                if (viewType === 'list') {
                    $('.events-grid').addClass('list-view');
                    console.log('Liste görünümü aktif');
                } else {
                    $('.events-grid').removeClass('list-view');
                    console.log('Grid görünümü aktif');
                }
            });

            // Dynamic filtering
            let filterTimeout;
            const filterInputs = $('.filter-form input, .filter-form select');
            
            filterInputs.on('change keyup', function() {
                clearTimeout(filterTimeout);
                
                // Add loading state
                $('.events-grid').addClass('loading');
                
                // Show typing indicator
                showTypingIndicator();
                
                filterTimeout = setTimeout(function() {
                    applyFilters();
                }, 500); // 500ms delay for better UX
            });

            // Prevent form submission
            $('.filter-form').on('submit', function(e) {
                e.preventDefault();
                return false;
            });

            function applyFilters() {
                const formData = new FormData($('.filter-form')[0]);
                const params = new URLSearchParams();
                
                // Add form data to params
                for (let [key, value] of formData.entries()) {
                    if (value) {
                        params.append(key, value);
                    }
                }

                // Show loading indicator
                showLoadingIndicator();

                // Make AJAX request
                $.ajax({
                    url: window.location.pathname,
                    method: 'GET',
                    data: params.toString(),
                    success: function(response) {
                        // Extract events grid from response
                        const tempDiv = $('<div>').html(response);
                        const newEventsGrid = tempDiv.find('.events-grid').html();
                        
                        if (newEventsGrid) {
                            $('.events-grid').html(newEventsGrid);
                            updateURL(params);
                            hideLoadingIndicator();
                            
                            // Reinitialize favorite buttons
                            initializeFavoriteButtons();
                            
                            console.log('Filtreler uygulandı');
                        } else {
                            showToast('Filtreleme sırasında hata oluştu', true);
                        }
                    },
                    error: function() {
                        hideLoadingIndicator();
                        showToast('Filtreleme başarısız oldu', true);
                    }
                });
            }

            function showTypingIndicator() {
                if ($('.typing-indicator').length === 0) {
                    $('.filter-status').html(`
                        <i class="bi bi-arrow-clockwise"></i>
                        <span>Yazıyor...</span>
                    `);
                    $('.filter-status i').addClass('spinning');
                }
            }

            function showLoadingIndicator() {
                if ($('.loading-overlay').length === 0) {
                    $('.events-grid').append(`
                        <div class="loading-overlay">
                            <div class="loading-spinner">
                                <i class="bi bi-arrow-clockwise"></i>
                                <span>Filtreleniyor...</span>
                            </div>
                        </div>
                    `);
                }
            }

            function hideLoadingIndicator() {
                $('.loading-overlay').remove();
                $('.events-grid').removeClass('loading');
                
                $('.filter-status i').removeClass('spinning');
            }

            function updateURL(params) {
                const newURL = window.location.pathname + (params.toString() ? '?' + params.toString() : '');
                window.history.pushState({}, '', newURL);
            }

            function initializeFavoriteButtons() {
                // Reinitialize favorite button functionality
                $(document).off('click', '.btn-favorite').on('click', '.btn-favorite', function(e) {
                    e.preventDefault();
                    const btn = $(this);
                    const eventId = btn.data('event-id');
                    
                    $.ajax({
                        url: '/Profile/ToggleFavorite',
                        type: 'POST',
                        data: { eventId: eventId },
                        success: function(res) {
                            if (res.success) {
                                btn.toggleClass('active');
                                const icon = btn.find('i');
                                if (btn.hasClass('active')) {
                                    icon.removeClass('bi-heart').addClass('bi-heart-fill');
                                    showToast('Etkinlik favorilere eklendi', false);
                                } else {
                                    icon.removeClass('bi-heart-fill').addClass('bi-heart');
                                    showToast('Etkinlik favorilerden çıkarıldı', false);
                                }
                            } else {
                                showToast(res.message || 'İşlem başarısız oldu', true);
                            }
                        },
                        error: function() {
                            showToast('Bir hata oluştu', true);
                        }
                    });
                });
            }
    });
</script>
}